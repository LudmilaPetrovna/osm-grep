// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileformat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fileformat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OSMPBF {
class BlobDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Blob>
     _instance;
  ::google::protobuf::internal::ArenaStringPtr raw_;
  ::google::protobuf::internal::ArenaStringPtr zlib_data_;
  ::google::protobuf::internal::ArenaStringPtr lzma_data_;
  ::google::protobuf::internal::ArenaStringPtr obsolete_bzip2_data_;
  ::google::protobuf::internal::ArenaStringPtr lz4_data_;
  ::google::protobuf::internal::ArenaStringPtr zstd_data_;
} _Blob_default_instance_;
class BlobHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BlobHeader>
     _instance;
} _BlobHeader_default_instance_;

namespace protobuf_fileformat_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, raw_size_),
  offsetof(BlobDefaultTypeInternal, raw_),
  offsetof(BlobDefaultTypeInternal, zlib_data_),
  offsetof(BlobDefaultTypeInternal, lzma_data_),
  offsetof(BlobDefaultTypeInternal, obsolete_bzip2_data_),
  offsetof(BlobDefaultTypeInternal, lz4_data_),
  offsetof(BlobDefaultTypeInternal, zstd_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, data_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHeader, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHeader, indexdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHeader, datasize_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(Blob)},
  { 20, 28, sizeof(BlobHeader)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Blob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlobHeader_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fileformat.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Blob_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Blob_default_instance_);_BlobHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BlobHeader_default_instance_);_Blob_default_instance_.raw_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Blob_default_instance_.zlib_data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Blob_default_instance_.lzma_data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Blob_default_instance_.obsolete_bzip2_data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Blob_default_instance_.lz4_data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Blob_default_instance_.zstd_data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020fileformat.proto\022\006OSMPBF\"\245\001\n\004Blob\022\020\n\010r"
      "aw_size\030\002 \001(\005\022\r\n\003raw\030\001 \001(\014H\000\022\023\n\tzlib_dat"
      "a\030\003 \001(\014H\000\022\023\n\tlzma_data\030\004 \001(\014H\000\022!\n\023OBSOLE"
      "TE_bzip2_data\030\005 \001(\014B\002\030\001H\000\022\022\n\010lz4_data\030\006 "
      "\001(\014H\000\022\023\n\tzstd_data\030\007 \001(\014H\000B\006\n\004data\"\?\n\nBl"
      "obHeader\022\014\n\004type\030\001 \002(\t\022\021\n\tindexdata\030\002 \001("
      "\014\022\020\n\010datasize\030\003 \002(\005B\017\n\rcrosby.binary"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 276);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fileformat.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fileformat_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Blob::kRawSizeFieldNumber;
const int Blob::kRawFieldNumber;
const int Blob::kZlibDataFieldNumber;
const int Blob::kLzmaDataFieldNumber;
const int Blob::kOBSOLETEBzip2DataFieldNumber;
const int Blob::kLz4DataFieldNumber;
const int Blob::kZstdDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Blob::Blob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fileformat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OSMPBF.Blob)
}
Blob::Blob(const Blob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_size_ = from.raw_size_;
  clear_has_data();
  switch (from.data_case()) {
    case kRaw: {
      set_raw(from.raw());
      break;
    }
    case kZlibData: {
      set_zlib_data(from.zlib_data());
      break;
    }
    case kLzmaData: {
      set_lzma_data(from.lzma_data());
      break;
    }
    case kOBSOLETEBzip2Data: {
      set_obsolete_bzip2_data(from.obsolete_bzip2_data());
      break;
    }
    case kLz4Data: {
      set_lz4_data(from.lz4_data());
      break;
    }
    case kZstdData: {
      set_zstd_data(from.zstd_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:OSMPBF.Blob)
}

void Blob::SharedCtor() {
  _cached_size_ = 0;
  raw_size_ = 0;
  clear_has_data();
}

Blob::~Blob() {
  // @@protoc_insertion_point(destructor:OSMPBF.Blob)
  SharedDtor();
}

void Blob::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void Blob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Blob::descriptor() {
  protobuf_fileformat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fileformat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Blob& Blob::default_instance() {
  protobuf_fileformat_2eproto::InitDefaults();
  return *internal_default_instance();
}

Blob* Blob::New(::google::protobuf::Arena* arena) const {
  Blob* n = new Blob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Blob::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:OSMPBF.Blob)
  switch (data_case()) {
    case kRaw: {
      data_.raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kZlibData: {
      data_.zlib_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kLzmaData: {
      data_.lzma_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOBSOLETEBzip2Data: {
      data_.obsolete_bzip2_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kLz4Data: {
      data_.lz4_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kZstdData: {
      data_.zstd_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Blob::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.Blob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_size_ = 0;
  clear_data();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Blob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OSMPBF.Blob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes raw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 raw_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_raw_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raw_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes zlib_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_zlib_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes lzma_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lzma_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_obsolete_bzip2_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes lz4_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lz4_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes zstd_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_zstd_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OSMPBF.Blob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OSMPBF.Blob)
  return false;
#undef DO_
}

void Blob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OSMPBF.Blob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bytes raw = 1;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->raw(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 raw_size = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->raw_size(), output);
  }

  switch (data_case()) {
    case kZlibData:
      ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
        3, this->zlib_data(), output);
      break;
    case kLzmaData:
      ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
        4, this->lzma_data(), output);
      break;
    case kOBSOLETEBzip2Data:
      ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
        5, this->obsolete_bzip2_data(), output);
      break;
    case kLz4Data:
      ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
        6, this->lz4_data(), output);
      break;
    case kZstdData:
      ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
        7, this->zstd_data(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OSMPBF.Blob)
}

::google::protobuf::uint8* Blob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.Blob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bytes raw = 1;
  if (has_raw()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->raw(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 raw_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->raw_size(), target);
  }

  switch (data_case()) {
    case kZlibData:
      target =
        ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
          3, this->zlib_data(), target);
      break;
    case kLzmaData:
      target =
        ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
          4, this->lzma_data(), target);
      break;
    case kOBSOLETEBzip2Data:
      target =
        ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
          5, this->obsolete_bzip2_data(), target);
      break;
    case kLz4Data:
      target =
        ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
          6, this->lz4_data(), target);
      break;
    case kZstdData:
      target =
        ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
          7, this->zstd_data(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.Blob)
  return target;
}

size_t Blob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.Blob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 raw_size = 2;
  if (has_raw_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->raw_size());
  }

  switch (data_case()) {
    // optional bytes raw = 1;
    case kRaw: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw());
      break;
    }
    // optional bytes zlib_data = 3;
    case kZlibData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->zlib_data());
      break;
    }
    // optional bytes lzma_data = 4;
    case kLzmaData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lzma_data());
      break;
    }
    // optional bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
    case kOBSOLETEBzip2Data: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->obsolete_bzip2_data());
      break;
    }
    // optional bytes lz4_data = 6;
    case kLz4Data: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lz4_data());
      break;
    }
    // optional bytes zstd_data = 7;
    case kZstdData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->zstd_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Blob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OSMPBF.Blob)
  GOOGLE_DCHECK_NE(&from, this);
  const Blob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Blob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OSMPBF.Blob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OSMPBF.Blob)
    MergeFrom(*source);
  }
}

void Blob::MergeFrom(const Blob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.Blob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_raw_size()) {
    set_raw_size(from.raw_size());
  }
  switch (from.data_case()) {
    case kRaw: {
      set_raw(from.raw());
      break;
    }
    case kZlibData: {
      set_zlib_data(from.zlib_data());
      break;
    }
    case kLzmaData: {
      set_lzma_data(from.lzma_data());
      break;
    }
    case kOBSOLETEBzip2Data: {
      set_obsolete_bzip2_data(from.obsolete_bzip2_data());
      break;
    }
    case kLz4Data: {
      set_lz4_data(from.lz4_data());
      break;
    }
    case kZstdData: {
      set_zstd_data(from.zstd_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void Blob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OSMPBF.Blob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Blob::CopyFrom(const Blob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.Blob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blob::IsInitialized() const {
  return true;
}

void Blob::Swap(Blob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Blob::InternalSwap(Blob* other) {
  using std::swap;
  swap(raw_size_, other->raw_size_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Blob::GetMetadata() const {
  protobuf_fileformat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fileformat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Blob

// optional int32 raw_size = 2;
bool Blob::has_raw_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Blob::set_has_raw_size() {
  _has_bits_[0] |= 0x00000001u;
}
void Blob::clear_has_raw_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void Blob::clear_raw_size() {
  raw_size_ = 0;
  clear_has_raw_size();
}
::google::protobuf::int32 Blob::raw_size() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.raw_size)
  return raw_size_;
}
void Blob::set_raw_size(::google::protobuf::int32 value) {
  set_has_raw_size();
  raw_size_ = value;
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.raw_size)
}

// optional bytes raw = 1;
bool Blob::has_raw() const {
  return data_case() == kRaw;
}
void Blob::set_has_raw() {
  _oneof_case_[0] = kRaw;
}
void Blob::clear_raw() {
  if (has_raw()) {
    data_.raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
const ::std::string& Blob::raw() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.raw)
  if (has_raw()) {
    return data_.raw_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Blob::set_raw(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.raw)
  if (!has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.raw)
}
#if LANG_CXX11
void Blob::set_raw(::std::string&& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.raw)
  if (!has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.Blob.raw)
}
#endif
void Blob::set_raw(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.Blob.raw)
}
void Blob::set_raw(const void* value, size_t size) {
  if (!has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.Blob.raw)
}
::std::string* Blob::mutable_raw() {
  if (!has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.raw)
  return data_.raw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Blob::release_raw() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.raw)
  if (has_raw()) {
    clear_has_data();
    return data_.raw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Blob::set_allocated_raw(::std::string* raw) {
  if (!has_raw()) {
    data_.raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (raw != NULL) {
    set_has_raw();
    data_.raw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        raw);
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.raw)
}

// optional bytes zlib_data = 3;
bool Blob::has_zlib_data() const {
  return data_case() == kZlibData;
}
void Blob::set_has_zlib_data() {
  _oneof_case_[0] = kZlibData;
}
void Blob::clear_zlib_data() {
  if (has_zlib_data()) {
    data_.zlib_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
const ::std::string& Blob::zlib_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.zlib_data)
  if (has_zlib_data()) {
    return data_.zlib_data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Blob::set_zlib_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.zlib_data)
  if (!has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.zlib_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.zlib_data)
}
#if LANG_CXX11
void Blob::set_zlib_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.zlib_data)
  if (!has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.zlib_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.Blob.zlib_data)
}
#endif
void Blob::set_zlib_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.zlib_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.Blob.zlib_data)
}
void Blob::set_zlib_data(const void* value, size_t size) {
  if (!has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.zlib_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.Blob.zlib_data)
}
::std::string* Blob::mutable_zlib_data() {
  if (!has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.zlib_data)
  return data_.zlib_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Blob::release_zlib_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.zlib_data)
  if (has_zlib_data()) {
    clear_has_data();
    return data_.zlib_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Blob::set_allocated_zlib_data(::std::string* zlib_data) {
  if (!has_zlib_data()) {
    data_.zlib_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (zlib_data != NULL) {
    set_has_zlib_data();
    data_.zlib_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        zlib_data);
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.zlib_data)
}

// optional bytes lzma_data = 4;
bool Blob::has_lzma_data() const {
  return data_case() == kLzmaData;
}
void Blob::set_has_lzma_data() {
  _oneof_case_[0] = kLzmaData;
}
void Blob::clear_lzma_data() {
  if (has_lzma_data()) {
    data_.lzma_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
const ::std::string& Blob::lzma_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.lzma_data)
  if (has_lzma_data()) {
    return data_.lzma_data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Blob::set_lzma_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.lzma_data)
  if (!has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.lzma_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.lzma_data)
}
#if LANG_CXX11
void Blob::set_lzma_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.lzma_data)
  if (!has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.lzma_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.Blob.lzma_data)
}
#endif
void Blob::set_lzma_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.lzma_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.Blob.lzma_data)
}
void Blob::set_lzma_data(const void* value, size_t size) {
  if (!has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.lzma_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.Blob.lzma_data)
}
::std::string* Blob::mutable_lzma_data() {
  if (!has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.lzma_data)
  return data_.lzma_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Blob::release_lzma_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.lzma_data)
  if (has_lzma_data()) {
    clear_has_data();
    return data_.lzma_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Blob::set_allocated_lzma_data(::std::string* lzma_data) {
  if (!has_lzma_data()) {
    data_.lzma_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (lzma_data != NULL) {
    set_has_lzma_data();
    data_.lzma_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        lzma_data);
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.lzma_data)
}

// optional bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
bool Blob::has_obsolete_bzip2_data() const {
  return data_case() == kOBSOLETEBzip2Data;
}
void Blob::set_has_obsolete_bzip2_data() {
  _oneof_case_[0] = kOBSOLETEBzip2Data;
}
void Blob::clear_obsolete_bzip2_data() {
  if (has_obsolete_bzip2_data()) {
    data_.obsolete_bzip2_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
const ::std::string& Blob::obsolete_bzip2_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.OBSOLETE_bzip2_data)
  if (has_obsolete_bzip2_data()) {
    return data_.obsolete_bzip2_data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Blob::set_obsolete_bzip2_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.OBSOLETE_bzip2_data)
  if (!has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.obsolete_bzip2_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.OBSOLETE_bzip2_data)
}
#if LANG_CXX11
void Blob::set_obsolete_bzip2_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.OBSOLETE_bzip2_data)
  if (!has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.obsolete_bzip2_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.Blob.OBSOLETE_bzip2_data)
}
#endif
void Blob::set_obsolete_bzip2_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.obsolete_bzip2_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.Blob.OBSOLETE_bzip2_data)
}
void Blob::set_obsolete_bzip2_data(const void* value, size_t size) {
  if (!has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.obsolete_bzip2_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.Blob.OBSOLETE_bzip2_data)
}
::std::string* Blob::mutable_obsolete_bzip2_data() {
  if (!has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.OBSOLETE_bzip2_data)
  return data_.obsolete_bzip2_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Blob::release_obsolete_bzip2_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.OBSOLETE_bzip2_data)
  if (has_obsolete_bzip2_data()) {
    clear_has_data();
    return data_.obsolete_bzip2_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Blob::set_allocated_obsolete_bzip2_data(::std::string* obsolete_bzip2_data) {
  if (!has_obsolete_bzip2_data()) {
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (obsolete_bzip2_data != NULL) {
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        obsolete_bzip2_data);
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.OBSOLETE_bzip2_data)
}

// optional bytes lz4_data = 6;
bool Blob::has_lz4_data() const {
  return data_case() == kLz4Data;
}
void Blob::set_has_lz4_data() {
  _oneof_case_[0] = kLz4Data;
}
void Blob::clear_lz4_data() {
  if (has_lz4_data()) {
    data_.lz4_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
const ::std::string& Blob::lz4_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.lz4_data)
  if (has_lz4_data()) {
    return data_.lz4_data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Blob::set_lz4_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.lz4_data)
  if (!has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.lz4_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.lz4_data)
}
#if LANG_CXX11
void Blob::set_lz4_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.lz4_data)
  if (!has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.lz4_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.Blob.lz4_data)
}
#endif
void Blob::set_lz4_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.lz4_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.Blob.lz4_data)
}
void Blob::set_lz4_data(const void* value, size_t size) {
  if (!has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.lz4_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.Blob.lz4_data)
}
::std::string* Blob::mutable_lz4_data() {
  if (!has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.lz4_data)
  return data_.lz4_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Blob::release_lz4_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.lz4_data)
  if (has_lz4_data()) {
    clear_has_data();
    return data_.lz4_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Blob::set_allocated_lz4_data(::std::string* lz4_data) {
  if (!has_lz4_data()) {
    data_.lz4_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (lz4_data != NULL) {
    set_has_lz4_data();
    data_.lz4_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        lz4_data);
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.lz4_data)
}

// optional bytes zstd_data = 7;
bool Blob::has_zstd_data() const {
  return data_case() == kZstdData;
}
void Blob::set_has_zstd_data() {
  _oneof_case_[0] = kZstdData;
}
void Blob::clear_zstd_data() {
  if (has_zstd_data()) {
    data_.zstd_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
const ::std::string& Blob::zstd_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.zstd_data)
  if (has_zstd_data()) {
    return data_.zstd_data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Blob::set_zstd_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.zstd_data)
  if (!has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.zstd_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.zstd_data)
}
#if LANG_CXX11
void Blob::set_zstd_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.zstd_data)
  if (!has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.zstd_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.Blob.zstd_data)
}
#endif
void Blob::set_zstd_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.zstd_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.Blob.zstd_data)
}
void Blob::set_zstd_data(const void* value, size_t size) {
  if (!has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.zstd_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.Blob.zstd_data)
}
::std::string* Blob::mutable_zstd_data() {
  if (!has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.zstd_data)
  return data_.zstd_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Blob::release_zstd_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.zstd_data)
  if (has_zstd_data()) {
    clear_has_data();
    return data_.zstd_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Blob::set_allocated_zstd_data(::std::string* zstd_data) {
  if (!has_zstd_data()) {
    data_.zstd_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (zstd_data != NULL) {
    set_has_zstd_data();
    data_.zstd_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        zstd_data);
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.zstd_data)
}

bool Blob::has_data() const {
  return data_case() != DATA_NOT_SET;
}
void Blob::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
Blob::DataCase Blob::data_case() const {
  return Blob::DataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobHeader::kTypeFieldNumber;
const int BlobHeader::kIndexdataFieldNumber;
const int BlobHeader::kDatasizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobHeader::BlobHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fileformat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OSMPBF.BlobHeader)
}
BlobHeader::BlobHeader(const BlobHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  indexdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_indexdata()) {
    indexdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indexdata_);
  }
  datasize_ = from.datasize_;
  // @@protoc_insertion_point(copy_constructor:OSMPBF.BlobHeader)
}

void BlobHeader::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indexdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datasize_ = 0;
}

BlobHeader::~BlobHeader() {
  // @@protoc_insertion_point(destructor:OSMPBF.BlobHeader)
  SharedDtor();
}

void BlobHeader::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indexdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlobHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobHeader::descriptor() {
  protobuf_fileformat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fileformat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobHeader& BlobHeader::default_instance() {
  protobuf_fileformat_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlobHeader* BlobHeader::New(::google::protobuf::Arena* arena) const {
  BlobHeader* n = new BlobHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.BlobHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!indexdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*indexdata_.UnsafeRawStringPointer())->clear();
    }
  }
  datasize_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OSMPBF.BlobHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OSMPBF.BlobHeader.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes indexdata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indexdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 datasize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_datasize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datasize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OSMPBF.BlobHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OSMPBF.BlobHeader)
  return false;
#undef DO_
}

void BlobHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OSMPBF.BlobHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OSMPBF.BlobHeader.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional bytes indexdata = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->indexdata(), output);
  }

  // required int32 datasize = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->datasize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OSMPBF.BlobHeader)
}

::google::protobuf::uint8* BlobHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.BlobHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OSMPBF.BlobHeader.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional bytes indexdata = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->indexdata(), target);
  }

  // required int32 datasize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->datasize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.BlobHeader)
  return target;
}

size_t BlobHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:OSMPBF.BlobHeader)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_datasize()) {
    // required int32 datasize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datasize());
  }

  return total_size;
}
size_t BlobHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.BlobHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required int32 datasize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datasize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes indexdata = 2;
  if (has_indexdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->indexdata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OSMPBF.BlobHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OSMPBF.BlobHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OSMPBF.BlobHeader)
    MergeFrom(*source);
  }
}

void BlobHeader::MergeFrom(const BlobHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.BlobHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_indexdata();
      indexdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indexdata_);
    }
    if (cached_has_bits & 0x00000004u) {
      datasize_ = from.datasize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlobHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OSMPBF.BlobHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobHeader::CopyFrom(const BlobHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.BlobHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void BlobHeader::Swap(BlobHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobHeader::InternalSwap(BlobHeader* other) {
  using std::swap;
  type_.Swap(&other->type_);
  indexdata_.Swap(&other->indexdata_);
  swap(datasize_, other->datasize_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobHeader::GetMetadata() const {
  protobuf_fileformat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fileformat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobHeader

// required string type = 1;
bool BlobHeader::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobHeader::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobHeader::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobHeader::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& BlobHeader::type() const {
  // @@protoc_insertion_point(field_get:OSMPBF.BlobHeader.type)
  return type_.GetNoArena();
}
void BlobHeader::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.BlobHeader.type)
}
#if LANG_CXX11
void BlobHeader::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.BlobHeader.type)
}
#endif
void BlobHeader::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.BlobHeader.type)
}
void BlobHeader::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.BlobHeader.type)
}
::std::string* BlobHeader::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:OSMPBF.BlobHeader.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlobHeader::release_type() {
  // @@protoc_insertion_point(field_release:OSMPBF.BlobHeader.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlobHeader::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.BlobHeader.type)
}

// optional bytes indexdata = 2;
bool BlobHeader::has_indexdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlobHeader::set_has_indexdata() {
  _has_bits_[0] |= 0x00000002u;
}
void BlobHeader::clear_has_indexdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlobHeader::clear_indexdata() {
  indexdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_indexdata();
}
const ::std::string& BlobHeader::indexdata() const {
  // @@protoc_insertion_point(field_get:OSMPBF.BlobHeader.indexdata)
  return indexdata_.GetNoArena();
}
void BlobHeader::set_indexdata(const ::std::string& value) {
  set_has_indexdata();
  indexdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OSMPBF.BlobHeader.indexdata)
}
#if LANG_CXX11
void BlobHeader::set_indexdata(::std::string&& value) {
  set_has_indexdata();
  indexdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSMPBF.BlobHeader.indexdata)
}
#endif
void BlobHeader::set_indexdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_indexdata();
  indexdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSMPBF.BlobHeader.indexdata)
}
void BlobHeader::set_indexdata(const void* value, size_t size) {
  set_has_indexdata();
  indexdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSMPBF.BlobHeader.indexdata)
}
::std::string* BlobHeader::mutable_indexdata() {
  set_has_indexdata();
  // @@protoc_insertion_point(field_mutable:OSMPBF.BlobHeader.indexdata)
  return indexdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlobHeader::release_indexdata() {
  // @@protoc_insertion_point(field_release:OSMPBF.BlobHeader.indexdata)
  clear_has_indexdata();
  return indexdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlobHeader::set_allocated_indexdata(::std::string* indexdata) {
  if (indexdata != NULL) {
    set_has_indexdata();
  } else {
    clear_has_indexdata();
  }
  indexdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indexdata);
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.BlobHeader.indexdata)
}

// required int32 datasize = 3;
bool BlobHeader::has_datasize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlobHeader::set_has_datasize() {
  _has_bits_[0] |= 0x00000004u;
}
void BlobHeader::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlobHeader::clear_datasize() {
  datasize_ = 0;
  clear_has_datasize();
}
::google::protobuf::int32 BlobHeader::datasize() const {
  // @@protoc_insertion_point(field_get:OSMPBF.BlobHeader.datasize)
  return datasize_;
}
void BlobHeader::set_datasize(::google::protobuf::int32 value) {
  set_has_datasize();
  datasize_ = value;
  // @@protoc_insertion_point(field_set:OSMPBF.BlobHeader.datasize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace OSMPBF

// @@protoc_insertion_point(global_scope)
